x-logging: &logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  nginx:
    build: ./nginx
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      REACT_APP_PORT: ${REACT_APP_PORT}
    depends_on:
      - backend
      - frontend
    networks:
      - keycloak-network

  frontend:
    build: ./web-react
    ports:
      - ${REACT_APP_PORT}:8000
    environment:
      REACT_APP_DOMAIN_NAME: ${REACT_APP_DOMAIN_NAME}
      REACT_APP_KEYCLOAK_URL: http://keycloak:${KC_PORT}
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
      REACT_APP_KEYCLOAK_REALM: ${KC_REALM_NAME}
      REACT_APP_KEYCLOAK_CLIENT_ID: ${KC_CLIENT_ID}
    volumes:
      - ./ngnix.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - keycloak
    networks:
      - keycloak-network

  backend:
    build: ./web-backend
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      PYTHONPATH: /app
      KAFKA_HOSTNAME: ${KAFKA_HOSTNAME}
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_PORT_LISTENER: ${KAFKA_PORT_LISTENER}
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
      REACT_APP_DOMAIN_NAME: ${REACT_APP_DOMAIN_NAME}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_CONTAINER: ${KC_HOSTNAME_CONTAINER}
      KC_PORT: ${KC_PORT}
      KC_REALM_NAME: ${KC_REALM_NAME}
      KC_REALM_COMMON: ${KC_REALM_COMMON}
      KC_CLIENT_ID: ${KC_CLIENT_ID}
      KC_CLIENT_SECRET_KEY: ${KC_CLIENT_SECRET_KEY}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYDB_PORT: ${KEYDB_PORT}
      KC_REALM_COMMON_CLIENT: ${KC_REALM_COMMON_CLIENT}
      KC_REALM_COMMON_USER: ${KC_REALM_COMMON_USER}
      KC_REALM_COMMON_USER_PASSWORD: ${KC_REALM_COMMON_USER_PASSWORD}
      LOG_FILE: ${LOG_FILE}
      ORIGINS: ${ORIGINS}
      DATABASE_URL: postgresql+asyncpg://${BACKEND_POSTGRES_USER}:${BACKEND_POSTGRES_PASSWORD}@backend-db:${BACKEND_POSTGRES_PORT}/${BACKEND_POSTGRES_DB}
    depends_on:
      - keycloak
      - backend-db
      - kafka
    networks:
      - keycloak-network

  backend-db:
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${BACKEND_POSTGRES_USER}", "-d", "${BACKEND_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${BACKEND_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BACKEND_POSTGRES_PASSWORD}
      POSTGRES_DB: ${BACKEND_POSTGRES_DB}
    volumes:
      - ./db_data:/var/lib/postgresql/data
    networks:
      - keycloak-network
    logging: *logging
  
  keycloak:
    build: ./keycloak
    command: "start-dev &"
    restart: on-failure
    user: "0"
    environment:
      KC_CLIENT_ID: ${KC_CLIENT_ID}
      KC_CLIENT_SECRET_KEY: ${KC_CLIENT_SECRET_KEY}
      KC_DB: postgres
      KC_DB_USERNAME: ${KEYCLOAK_POSTGRES_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      KC_DB_URL: jdbc:postgresql://keycloak-db/${KEYCLOAK_POSTGRES_DB}
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_LOG_LEVEL: ${KC_LOG_LEVEL}
      KC_REALM_NAME: ${KC_REALM_NAME}
      KC_REALM_COMMON: ${KC_REALM_COMMON}
      KC_REALM_COMMON_CLIENT: ${KC_REALM_COMMON_CLIENT}
      KC_REALM_COMMON_USER: ${KC_REALM_COMMON_USER}
      KC_REALM_COMMON_USER_PASSWORD: ${KC_REALM_COMMON_USER_PASSWORD}
      KC_CORS: 'true'
      KC_CORS_MAX_AGE: '1000'
      KC_CORS_ALLOWED_METHODS: 'POST,PUT,DELETE,GET,OPTIONS'
      KC_CORS_ALLOWED_HEADERS: 'origin, content-type, accept, authorization, pragma, cache-control'
      KC_CORS_EXPOSED_HEADERS: 'origin, content-type, accept, authorization, pragma, cache-control'
      KC_CORS_ALLOWED_ORIGINS: '*'
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      GF_URL: ${GF_HOSTNAME}:${GF_SERVER_HTTP_PORT}
      GF_ADMIN_USERNAME: ${GF_ADMIN_USERNAME}
      GF_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD}
      GF_HOSTNAME: ${GF_HOSTNAME}
      GF_SERVER_HTTP_PORT: ${GF_SERVER_HTTP_PORT}
    depends_on:
      keycloak-db:
        condition: service_healthy
    entrypoint: ["/tmp/import/import-realm.sh"]
    ports:
      - ${KC_PORT}:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/realms/${KC_REALM_NAME}"]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s
    networks:
      - keycloak-network
    logging: *logging

  keycloak-db:
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KEYCLOAK_POSTGRES_USER}", "-d", "${KEYCLOAK_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_POSTGRES_DB}
    networks:
      - keycloak-network
    volumes:
      - ./keycloak_data:/var/lib/postgresql/data

  keydb:
    image: eqalpha/keydb:latest
    ports:
      - "${KEYDB_PORT}:${KEYDB_PORT}"  # Expose KeyDB on port 6379
    environment:
      KEYDB_PASSWORD: ${KEYDB_PASSWORD}  # Set password for KeyDB
    command: ["keydb-server", "--requirepass", "${KEYDB_PASSWORD}"]
    networks:
      - keycloak-network

  kafka:
    image: bitnami/kafka:${KAFKA_VERSION}
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}  # For client connections
      - ${KAFKA_PORT_LISTENER}:${KAFKA_PORT_LISTENER}  # For KRaft controller
    restart: unless-stopped
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:${KAFKA_PORT_LISTENER}
      KAFKA_CFG_LISTENERS: PLAINTEXT://:${KAFKA_PORT},CONTROLLER://:${KAFKA_PORT_LISTENER}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
    depends_on:
      - zookeeper
    networks:
      - keycloak-network

  zookeeper:
    image: bitnami/zookeeper:${ZOOKEEPER_VERSION}
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - keycloak-network
  
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - "8008:8008"
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    networks:
      - keycloak-network
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=45d'
      - '--storage.tsdb.wal-compression'
      - '--web.enable-lifecycle'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      start_period: 12s
      interval: 35s
      retries: 3
      timeout: 5s
    ports:
      - ${PROMETHEUS_PORT}:9090
    networks:
      - keycloak-network
    logging: *logging

  grafana:
    image: grafana/grafana-oss:${GF_VERSION}
    restart: unless-stopped
    ports:
      - ${GF_SERVER_HTTP_PORT}:${GF_SERVER_HTTP_PORT}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${GF_SERVER_HTTP_PORT}/api/health"]
    environment:
      GF_SERVER_HTTP_PORT: ${GF_SERVER_HTTP_PORT}
      GF_SERVER_ROOT_URL: ${GF_HOSTNAME}:${GF_SERVER_HTTP_PORT}
      GF_LOG_LEVEL: ${GF_LOG_LEVEL}
      GF_AUTH_BASIC_ENABLED: "true"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
      GF_AUTH_GENERIC_OAUTH_TLS_SKIP_VERIFY_INSECURE: "true"
      GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
      GF_AUTH_GENERIC_OAUTH_NAME: ${GF_AUTH_GENERIC_OAUTH_NAME}
      GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP: "true"
      GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "grafana"
      GF_AUTH_GENERIC_OAUTH_EMAIL_ATTRIBUTE_NAME: "email:primary"
      GF_AUTH_GENERIC_OAUTH_SCOPES: "openid profile email"
      GF_AUTH_GENERIC_OAUTH_AUTH_URL: ${KC_HOSTNAME}:${KC_PORT}/realms/${KC_REALM_COMMON}/protocol/openid-connect/auth
      GF_AUTH_GENERIC_OAUTH_TOKEN_URL: ${KC_HOSTNAME_CONTAINER}:${KC_PORT}/realms/${KC_REALM_COMMON}/protocol/openid-connect/token
      GF_AUTH_GENERIC_OAUTH_API_URL: ${KC_HOSTNAME}:${KC_PORT}/realms/${KC_REALM_COMMON}/protocol/openid-connect/userinfo
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - keycloak-network
    logging: *logging

volumes:
  db_data:
  keycloak_data:

networks:
  keycloak-network:
    driver: bridge
